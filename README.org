[[https://travis-ci.org/tdhock/requireGitHub][https://travis-ci.org/tdhock/requireGitHub.png?branch=master]]

* Problem: the versionless CRAN repository system

As of 26 March 2014, the standard R package installation system,
=install.packages("pkg")= can only install the most recent version
from a CRAN-like repository. This creates a problem: if your code
depends on =pkg= and its author changes it, then your code may stop
working when you install the new version of =pkg=.

* Example: install ChIPseeker from Bioconductor

Bioconductor is a bit better since it provides *several* CRAN-like
repositories, one for each version of Bioconductor. That means we can
actually install old versions of packages (and their dependencies)
using =install.packages=, if those packages are located on
Bioconductor. For example, the R code

#+BEGIN_SRC R
install.packages("ChIPseeker", repos="http://www.bioconductor.org/packages/3.0/bioc")
#+END_SRC

means to install the =ChIPseeker= version 1.2.6 package referenced in
http://www.bioconductor.org/packages/3.0/bioc/src/contrib/PACKAGES.

In contrast, 

#+BEGIN_SRC R
install.packages("ChIPseeker", repos="http://www.bioconductor.org/packages/2.14/bioc")
#+END_SRC

means to install the older =ChIPseeker= version 1.0.11 package referenced in
http://www.bioconductor.org/packages/2.14/bioc/src/contrib/PACKAGES.

However there is still a potential problem: both versions of
=ChIPseeker= list =Imports: plyr=. The =plyr= package is on CRAN, so
the only version that can be installed using =install.packages= is the
most recent version. If the most recent version of =plyr= introduced
any changes that affect its usage in =ChIPseeker=, then there may be
unwanted differences or errors.

* Solution: depend on GitHub packages instead

R packages hosted on GitHub can be installed with
=devtools::install_github=, which stores the commit version SHA1 hash
in the GithubSHA1 field of the DESCRIPTION file. You can write down
that version in your R code:

#+BEGIN_SRC R
requireGitHub::requireGitHub(
  "tdhock/animint@057f34055ee876404caae7abc1c077a7bf126580",
  "rstudio/ggvis@8aa5ae207b3da0ff218fb5a3829bbdd59e54043c") 
#+END_SRC

This code will install the specified package versions from the
indicated GitHub repositories if they are not already installed, then
call =require(pkg)= to load each package. To get access to the
=requireGitHub= function, execute the following code.

#+BEGIN_SRC R
install.packages("devtools")
devtools::install_github("tdhock/requireGitHub")
#+END_SRC

Finally, you can generate a =requireGitHub(...)= declaration like the
one above based on your currently installed packages:

#+BEGIN_SRC R
requireGitHub::requireGitHub_code(animint, ggvis)
#+END_SRC

You can use =requireGitHub_package= for packages which are not in the
root of a github repo, or for packages which do not have the same name
as the repo.

#+BEGIN_SRC R
requireGitHub::requireGitHub_package(
  "aldro61",
  "mmit/Rpackage",
  "edf81ba77fdd4b005ad89b81d9e12d289c8146e9",
  "mmit")
#+END_SRC

* Related work

- CRAN does store old package versions in =src/contrib/Archive=,
  e.g. http://probability.ca/cran/src/contrib/Archive/directlabels/,
  so you can download and install manually using =R CMD INSTALL=, or
  use [[http://christophergandrud.blogspot.ca/2013/02/installoldpackages-repmis-command-for.html][Christopher Gandrud's repmis::InstallOldPackages]].

- Instead of explicitly writing =requireGitHub= in each R script, you
  can hide the package versions in a project-specific file, such as
  the =packrat.lock= file used by [[http://rstudio.github.io/packrat/][RStudio's packrat]].

- [[http://projects.revolutionanalytics.com/documents/rrt/rrtpkgs/][Revolution's checkpoint]] can install CRAN packages at any date in the
  past (they have an daily archive of CRAN since 2014-09-17).
